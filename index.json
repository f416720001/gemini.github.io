[{"content":"Golang 簡易聊天室 f416720001/simple_chat\n這周末學習了與MongoDB，使用了 mgo、mongo-go-driver 這兩個套件去學習，但\u0026hellip;上手還需要一陣子，太久沒使用強型別，很多地方都還需要適應。\n所以，這次先帶來 Go into Web!-iThome 上所分享的小專案來進行學習，也能更快去熟悉語法及debug、build、log等開發技巧，話不多說，讓我們開始吧。\n知識點們 melody https://github.com/olahol/melody Minimalist websocket framework for Go\n是一個2018年已經棄坑(喂~)的 websocket framework，是 based on gorilla/websocket 上封裝的一個 package，更容易使用，以外如果要找還有在維護、Star還夠多的messaging server 可以參考 centrifugal/centrifugo\n回到正題，而因為它是 websocket 框架，網站的靜態文件還是得找個人來幫忙掛載，在 melody 的官方教學文件上，就是與 gin 一起配合，就讓我們來看看以下的 code~\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package main import ( \u0026#34;github.com/gin-gonic/gin\u0026#34; \u0026#34;gopkg.in/olahol/melody.v1\u0026#34; \u0026#34;net/http\u0026#34; ) func main() { // 實例 gin、melody r := gin.Default() m := melody.New() // 把index.html掛載到 / r.GET(\u0026#34;/\u0026#34;, func(c *gin.Context) { http.ServeFile(c.Writer, c.Request, \u0026#34;index.html\u0026#34;) }) // melody\u0026#39;s websocket 則是掛載到 /ws r.GET(\u0026#34;/ws\u0026#34;, func(c *gin.Context) { // gin的 response 與 request 轉手交給 melody 去 handle m.HandleRequest(c.Writer, c.Request) }) // 那麼 melody 透過 handlemessage，當 message 進來時該如何處理，這邊的寫法是，有訊息進來將會告知所有 sessions m.HandleMessage(func(s *melody.Session, msg []byte) { m.Broadcast(msg) }) // melody handleconnect 使用者連線，這邊我們定義websocket連線網址長得像 // ws://localhost:5000/ws?id=Guest755 m.HandleConnect(func(session *melody.Session) { // 取得url上的param id // := 冒號賦值，不用預先定義直接賦值 id := session.Request.URL.Query().Get(\u0026#34;id\u0026#34;) // 廣播新的Message，這邊有個 GetByteMessage 會做 JSON encoding m.Broadcast(NewMessage(\u0026#34;other\u0026#34;, id, \u0026#34;加入聊天室\u0026#34;).GetByteMessage()) }) // melody handleconnect 使用者離開後，傳訊息通知其他使用者 m.HandleClose(func(session *melody.Session, i int, s string) error { id := session.Request.URL.Query().Get(\u0026#34;id\u0026#34;) m.Broadcast(NewMessage(\u0026#34;other\u0026#34;, id, \u0026#34;離開聊天室\u0026#34;).GetByteMessage()) return nil }) // gin server run on port 5000 r.Run(\u0026#34;:5000\u0026#34;) } Struct 結構資料 非常像C++的struct，我目前使用起來可以說是一模一樣，可以定義一結構化的資料，使用已經定義好的Struct方式如下: Message{Event: \u0026quot;ABC\u0026quot;, Name: \u0026quot;ABC\u0026quot;, Content: \u0026quot;ABC\u0026quot;, TimeStamp: time.Now()}\n看起來有點繁瑣吧，這邊提供一個func NewMessage，將一些param mapping到定義好的struct，可以更方便的使用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 type Message struct { Event string `json:\u0026#34;event\u0026#34;` Name string `json:\u0026#34;name\u0026#34;` Content string `json:\u0026#34;content\u0026#34;` TimeStamp time.Time `json:\u0026#34;timestamp\u0026#34;` } func NewMessage(event, name, content string) *Message { return \u0026amp;Message{ Event: event, Name: name, Content: content, TimeStamp: time.Now(), } } func (m *Message) GetByteMessage() []byte { result, _ := json.Marshal(m) return result } ","permalink":"https://f416720001.github.io/posts/go-%E5%AD%B8%E7%BF%92%E7%AD%86%E8%A8%98-vol.1/","summary":"Golang 簡易聊天室 f416720001/simple_chat\n這周末學習了與MongoDB，使用了 mgo、mongo-go-driver 這兩個套件去學習，但\u0026hellip;上手還需要一陣子，太久沒使用強型別，很多地方都還需要適應。\n所以，這次先帶來 Go into Web!-iThome 上所分享的小專案來進行學習，也能更快去熟悉語法及debug、build、log等開發技巧，話不多說，讓我們開始吧。\n知識點們 melody https://github.com/olahol/melody Minimalist websocket framework for Go\n是一個2018年已經棄坑(喂~)的 websocket framework，是 based on gorilla/websocket 上封裝的一個 package，更容易使用，以外如果要找還有在維護、Star還夠多的messaging server 可以參考 centrifugal/centrifugo\n回到正題，而因為它是 websocket 框架，網站的靜態文件還是得找個人來幫忙掛載，在 melody 的官方教學文件上，就是與 gin 一起配合，就讓我們來看看以下的 code~\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package main import ( \u0026#34;github.","title":"Go-學習筆記 vol.1"},{"content":" 前言 近期在公司接觸到其他團隊的C++專案，遇到與其他語言(GO)/系統串接的情況。 有人提議將使用 stdin 讓兩個語言做溝通(實際效果也不錯，下次再分享)， 但習慣使用webapi的我，突然發覺自己不曾使用過cpp去架設過api\u0026hellip; 於是就有了這篇 週末閒來無事，google了一下，找到 github 上擁有 7.6k stars 的 cpp-httplib。 引用時也很方便，直接將 httplib.h 拉進自己的專案內就可以使用，真舒爽!\nLibrary httplib 🔗 A C++11 single-file header-only cross platform HTTP/HTTPS library. It\u0026rsquo;s extremely easy to setup. Just include the httplib.h file in your code!\nNOTE: This library uses \u0026lsquo;blocking\u0026rsquo; socket I/O. If you are looking for a library with \u0026rsquo;non-blocking\u0026rsquo; socket I/O, this is not the one that you want.\n開頭就提及，此 library 是 blocking socket I/O，對於 I/O 密集的 api 可能就不太適合了。\n簡易範例 NOTE: 記得建一個資料夾 lib，將 httplib.h 放進去，這樣就可以使用了，真是方便呢!!\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // main.cpp #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026#34;lib/httplib.h\u0026#34; using namespace httplib; void hello_world(const Request\u0026amp; req,Response\u0026amp; resp) { printf(\u0026#34;%s [%s] %s, %s, %s %i \\n\u0026#34;, ctime(\u0026amp;my_time), req.method.c_str(), req.path.c_str(), req.remote_addr.c_str(), req.version.c_str(), req.remote_port); resp.set_content(\u0026#34;\u0026lt;html\u0026gt;\u0026lt;h1\u0026gt;Hello world.\u0026lt;/h1\u0026gt;\u0026lt;/html\u0026gt;\u0026#34;,\u0026#34;text/html\u0026#34;); } int main() { Server svr; svr.Get(\u0026#34;/api/hello\u0026#34;, hello_world); svr.listen(\u0026#34;0.0.0.0\u0026#34;, 8000); system(\u0026#34;pause\u0026#34;); return 0; } 輸入 g++ -g main.cpp -o svr -lpthread \u0026amp;\u0026amp; ./svr 編譯並執行\n(如果沒安裝 g++)\n1 2 sudo apt update sudo apt install g++ 安裝完成測試一下\n1 2 3 4 5 6 g++ --version \u0026gt;\u0026gt;\u0026gt; g++ (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0 Copyright (C) 2019 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 最後使用瀏覽器開啟 localhost:8000/api/hello 即可看到 Hello world.\nnlohmann/json 🔗 based on c++11\n使用範例 NOTE: 將 json.hpp 放進 ./lib 當中，即可使用，也是很方便的~\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #include \u0026lt;lib/json.hpp\u0026gt; using json = nlohmann::json; void json_callback(const Request\u0026amp; req, Response\u0026amp; resp) { json result{ {\u0026#34;msg\u0026#34;, \u0026#34;ok\u0026#34;}, {\u0026#34;zh-tw\u0026#34;, \u0026#34;你好\u0026#34;}, {\u0026#34;data\u0026#34;, 123}}; resp.set_content(result.dump(), \u0026#34;text/plain\u0026#34;); } int main() { Server svr; svr.Get(\u0026#34;/api/json\u0026#34;, json_callback); svr.listen(\u0026#34;0.0.0.0\u0026#34;, 8000); system(\u0026#34;pause\u0026#34;); return 0; } 最後使用瀏覽器開啟 localhost:8000/api/json 即可看到 Hello world.\n以上就是這次的簡易教學，相關code有放置在 github-demo，可以git clone 下來把玩。\n","permalink":"https://f416720001.github.io/posts/cpp%E7%B0%A1%E6%98%93api%E6%95%99%E5%AD%B8/","summary":"前言 近期在公司接觸到其他團隊的C++專案，遇到與其他語言(GO)/系統串接的情況。 有人提議將使用 stdin 讓兩個語言做溝通(實際效果也不錯，下次再分享)， 但習慣使用webapi的我，突然發覺自己不曾使用過cpp去架設過api\u0026hellip; 於是就有了這篇 週末閒來無事，google了一下，找到 github 上擁有 7.6k stars 的 cpp-httplib。 引用時也很方便，直接將 httplib.h 拉進自己的專案內就可以使用，真舒爽!\nLibrary httplib 🔗 A C++11 single-file header-only cross platform HTTP/HTTPS library. It\u0026rsquo;s extremely easy to setup. Just include the httplib.h file in your code!\nNOTE: This library uses \u0026lsquo;blocking\u0026rsquo; socket I/O. If you are looking for a library with \u0026rsquo;non-blocking\u0026rsquo; socket I/O, this is not the one that you want.\n開頭就提及，此 library 是 blocking socket I/O，對於 I/O 密集的 api 可能就不太適合了。","title":"Cpp簡易api教學"},{"content":" 來源:https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\n在 JavaScript 中，可以通過使用 window.innerHeight 來取得目前顯示畫面的值。該值會包含瀏覽器的界面，並會隨著介面變化去做更新。所以此次的訣竅，是將 window.innerHeight 值存在 CSS 變數中，並將該值用來取代 vh 的基本單位。\nCSS 1 2 3 4 #map { height: calc(100vh - 84px); height: calc((var(--vh, 1vh) * 100) - 84px); } JavaScript 1 2 3 let vh = window.innerHeight * 0.01; // Then we set the value in the --vh custom property to the root of the document document.documentElement.style.setProperty(\u0026#34;--vh\u0026#34;, `${vh}px`); ","permalink":"https://f416720001.github.io/posts/%E6%89%8B%E6%A9%9F%E7%B6%B2%E9%A0%81100vh-v.s.-%E7%B6%B2%E5%9D%80%E5%88%97/","summary":" 來源:https://css-tricks.com/the-trick-to-viewport-units-on-mobile/\n在 JavaScript 中，可以通過使用 window.innerHeight 來取得目前顯示畫面的值。該值會包含瀏覽器的界面，並會隨著介面變化去做更新。所以此次的訣竅，是將 window.innerHeight 值存在 CSS 變數中，並將該值用來取代 vh 的基本單位。\nCSS 1 2 3 4 #map { height: calc(100vh - 84px); height: calc((var(--vh, 1vh) * 100) - 84px); } JavaScript 1 2 3 let vh = window.innerHeight * 0.01; // Then we set the value in the --vh custom property to the root of the document document.documentElement.style.setProperty(\u0026#34;--vh\u0026#34;, `${vh}px`); ","title":"手機網頁100vh v.s. 網址列"},{"content":"Mode Client mode Cluster mode 差異點 driver 放置的位置\ndriver放置於 Client Master Cluster Slave(Worker)其中一台 影響層面 Memory 設定 啟動Job時，是否要指定memory的使用量\nMemory設定 Client 都可 Cluster 指定比較優，因為driver預設2GB 機器壞掉時影響層面 EC2壞掉影響層面 worker記憶體量 Client 千萬不能壞Master，需要額外的重啟流程 優 Cluster 壞帶有driver的worker時，master會協助重啟 少 小結論 Client 適合中小型\n適合情境 Client Master/Slave 在同一網路內 Cluster Master/Slave 在不同網路內 ","permalink":"https://f416720001.github.io/posts/aws-emr-%E6%A8%A1%E5%BC%8F%E5%B7%AE%E7%95%B0/","summary":"Mode Client mode Cluster mode 差異點 driver 放置的位置\ndriver放置於 Client Master Cluster Slave(Worker)其中一台 影響層面 Memory 設定 啟動Job時，是否要指定memory的使用量\nMemory設定 Client 都可 Cluster 指定比較優，因為driver預設2GB 機器壞掉時影響層面 EC2壞掉影響層面 worker記憶體量 Client 千萬不能壞Master，需要額外的重啟流程 優 Cluster 壞帶有driver的worker時，master會協助重啟 少 小結論 Client 適合中小型\n適合情境 Client Master/Slave 在同一網路內 Cluster Master/Slave 在不同網路內 ","title":"AWS EMR 模式差異"},{"content":"Docker Timezone 時區問題 方法一： 將本機的時間帶到 image 當中 when docker run some-image\n1 -v /etc/localtime:/etc/localtime:ro docker-compsoe.yml\n1 2 3 4 5 services: some-container: volumes: - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro 方法二(推薦)： 設定環境變數 when docker run some-image\n1 -e \u0026#34;TZ=Asia/Taipei\u0026#34; docker-compose.yml\n1 2 3 4 sevices: some-container: environment: TZ: Asia/Taipei 例外 如果使用到 alpine 版本\n則需要自行重新 build image\nDockerfile 先添加以下兩行，再進行上述操作\n1 2 RUN apk update \u0026amp;\u0026amp; \\ apk add -U tzdata ","permalink":"https://f416720001.github.io/posts/docker-timezone-%E6%99%82%E5%8D%80%E5%95%8F%E9%A1%8C/","summary":"Docker Timezone 時區問題 方法一： 將本機的時間帶到 image 當中 when docker run some-image\n1 -v /etc/localtime:/etc/localtime:ro docker-compsoe.yml\n1 2 3 4 5 services: some-container: volumes: - /etc/timezone:/etc/timezone:ro - /etc/localtime:/etc/localtime:ro 方法二(推薦)： 設定環境變數 when docker run some-image\n1 -e \u0026#34;TZ=Asia/Taipei\u0026#34; docker-compose.yml\n1 2 3 4 sevices: some-container: environment: TZ: Asia/Taipei 例外 如果使用到 alpine 版本\n則需要自行重新 build image\nDockerfile 先添加以下兩行，再進行上述操作\n1 2 RUN apk update \u0026amp;\u0026amp; \\ apk add -U tzdata ","title":"Docker timezone 時區問題"},{"content":"題目: 讓以下 function 回傳 True 原文: https://www.reddit.com/r/Python/comments/cje5yh/short_python_challenge_make_this_return_true/\n1 2 3 4 5 6 def check(x): if x+1 is 1+x: return False if x+2 is not 2+x: return False return True 解答一: -7 在 Python 中，整数 -5 到 256 會預先分配到記憶體，\n此時 -7 + 1 得到的 -6，恰好在這範圍之外，\n才會出現 -6 is not -6 的情況\n解答二: 自定義 class 透過實現 add，讓他可以與 integer 互動， 但其實就是拿來判斷 integer 後，回傳適當的 boolean (有點作弊 XDD)\n1 2 3 4 5 6 class Test(int): def __add__(self, v): if v == 1: return 0 else: return v ","permalink":"https://f416720001.github.io/posts/python-%E8%85%A6%E7%AD%8B%E6%80%A5%E8%BD%89%E5%BD%8E/","summary":"題目: 讓以下 function 回傳 True 原文: https://www.reddit.com/r/Python/comments/cje5yh/short_python_challenge_make_this_return_true/\n1 2 3 4 5 6 def check(x): if x+1 is 1+x: return False if x+2 is not 2+x: return False return True 解答一: -7 在 Python 中，整数 -5 到 256 會預先分配到記憶體，\n此時 -7 + 1 得到的 -6，恰好在這範圍之外，\n才會出現 -6 is not -6 的情況\n解答二: 自定義 class 透過實現 add，讓他可以與 integer 互動， 但其實就是拿來判斷 integer 後，回傳適當的 boolean (有點作弊 XDD)\n1 2 3 4 5 6 class Test(int): def __add__(self, v): if v == 1: return 0 else: return v ","title":"Python 腦筋急轉彎"},{"content":" Docker-compose.yml 無密碼，無SSL\n1 2 3 4 5 6 7 8 9 10 11 12 version: \u0026#39;3\u0026#39; services: registry: image: registry:2.8.1 ports: - \u0026#34;21010:5000\u0026#34; environment: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /data volumes: - ./auth:/auth - ./data:/data Chagne your images name 1 docker tag alpine localhost:21010/my-alpine Push it 1 docker push localhost:21010/my-alpine after all, 4. Pull your image from private registry\n1 docker pull localhost:21010/my-alpine Ref. https://gabrieltanner.org/blog/docker-registry/\n","permalink":"https://f416720001.github.io/posts/docker-private-registry%E6%90%AD%E5%BB%BA/","summary":"Docker-compose.yml 無密碼，無SSL\n1 2 3 4 5 6 7 8 9 10 11 12 version: \u0026#39;3\u0026#39; services: registry: image: registry:2.8.1 ports: - \u0026#34;21010:5000\u0026#34; environment: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY: /data volumes: - ./auth:/auth - ./data:/data Chagne your images name 1 docker tag alpine localhost:21010/my-alpine Push it 1 docker push localhost:21010/my-alpine after all, 4. Pull your image from private registry\n1 docker pull localhost:21010/my-alpine Ref. https://gabrieltanner.org/blog/docker-registry/","title":"Docker private registry搭建"},{"content":" 前言: 2020 年碩士期間搭建了 Hexo 來記錄所學，當時對於 npm 家族比較習慣，近期開始接觸 golang，順勢也把荒廢的 blog 搬移過來，希望接下來能夠整理一些近期 kafka、AWS EMR、BigQuery 所學的知識\u0026hellip;\nHugo 安裝最新版本 如果你也像我一樣，apt install hugo 都卡在 0.68.0 左右的版本的話，可以參考 這邊是使用 ubuntu 20.04，要記得挑符合自己 cpu 版本的\n1. 移除 apt 所安裝的 hugo 1 2 3 sudo apt update sudo apt install curl wget sudo apt remove hugo 2. 下載最新 hugo.deb 1 2 3 4 5 6 curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest \\ | grep browser_download_url \\ | grep Linux-64bit.deb \\ | grep -v extended \\ | cut -d \u0026#39;\u0026#34;\u0026#39; -f 4 \\ | wget -i - 3. 安裝他，改成你下載的 filename 1 sudo dpkg -i hugo*_Linux-64bit.deb 4. 完工 1 hugo version ","permalink":"https://f416720001.github.io/posts/hugo-%E6%9C%80%E6%96%B0%E7%89%88%E6%90%AD%E5%BB%BA/","summary":"前言: 2020 年碩士期間搭建了 Hexo 來記錄所學，當時對於 npm 家族比較習慣，近期開始接觸 golang，順勢也把荒廢的 blog 搬移過來，希望接下來能夠整理一些近期 kafka、AWS EMR、BigQuery 所學的知識\u0026hellip;\nHugo 安裝最新版本 如果你也像我一樣，apt install hugo 都卡在 0.68.0 左右的版本的話，可以參考 這邊是使用 ubuntu 20.04，要記得挑符合自己 cpu 版本的\n1. 移除 apt 所安裝的 hugo 1 2 3 sudo apt update sudo apt install curl wget sudo apt remove hugo 2. 下載最新 hugo.deb 1 2 3 4 5 6 curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest \\ | grep browser_download_url \\ | grep Linux-64bit.deb \\ | grep -v extended \\ | cut -d \u0026#39;\u0026#34;\u0026#39; -f 4 \\ | wget -i - 3.","title":"Hugo 最新版搭建"},{"content":"跌跌撞撞 Skill Python、C++、Golang、Vue.js\n","permalink":"https://f416720001.github.io/about/","summary":"跌跌撞撞 Skill Python、C++、Golang、Vue.js","title":"About"}]